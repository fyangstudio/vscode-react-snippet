{
  "useState": {
    "prefix": [
      "useState",
      "us",
      "rus"
    ],
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState})"
    ],
    "description": "State Hook\n"
  },
  "useEffect Without Cleanup": {
    "prefix": [
      "useEffect",
      "ue",
      "rue"
    ],
    "body": [
      "useEffect(() => {",
      "\t${1}",
      "});"
    ],
    "description": "Effect Hook Without Cleanup\n"
  },
  "useEffect Optimizing": {
    "prefix": "ueo",
    "body": [
      "useEffect(() => {",
      "\t${2}",
      "",
      "}, [${1:input}]);"
    ],
    "description": "Effect Hook Optimizing\n"
  },
  "useEffect Cleanup": {
    "prefix": "uec",
    "body": [
      "useEffect(() => {",
      "\t${2}",
      "",
      "\treturn () => {",
      "\t\t${1:cleanUpEffect}",
      "\t};",
      "});"
    ],
    "description": "Effects Cleanup\n"
  },
  "useEffect Cleanup and Optimizing": {
    "prefix": "ueco",
    "body": [
      "useEffect(() => {",
      "\t${3}",
      "",
      "\treturn () => {",
      "\t\t${2:cleanUpEffect}",
      "\t};",
      "}, [${1:input}]);"
    ],
    "description": "Effects Cleanup and Optimizing Performance by Skipping Effects\n"
  },
  "useContext": {
    "prefix": [
      "useContext",
      "uc"
    ],
    "body": [
      "const ${1:context} = useContext(${2:contextValue})"
    ]
  },
  "useReducer": {
    "prefix": [
      "useReducer",
      "ur"
    ],
    "body": [
      "const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init})"
    ]
  },
  "useCallback": {
    "prefix": [
      "useCallback",
      "ucb"
    ],
    "body": [
      "useCallback(",
      "\t() => {",
      "\t\t${1:callback}",
      "\t},",
      "\t[${2:input}],",
      ")"
    ]
  },
  "useMemo": {
    "prefix": [
      "useMemo",
      "um"
    ],
    "body": [
      "useMemo(() => ${1:function}, ${2:input})"
    ]
  },
  "useRef": {
    "prefix": [
      "useRef",
      "ure"
    ],
    "body": [
      "const ${1:ref} = useRef(${2:initialValue})"
    ]
  },
  "useImperativeHandle": {
    "prefix": [
      "useImperativeHandle",
      "uih"
    ],
    "body": [
      "useImperativeHandle(",
      "\t${1:ref},",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${3:input}],",
      ")"
    ]
  },
  "useDebugValue": {
    "prefix": [
      "useDebugValue",
      "udv"
    ],
    "body": [
      "useDebugValue(${1:value})"
    ]
  },
  "useLayoutEffect": {
    "prefix": [
      "useLayoutEffect",
      "ule"
    ],
    "body": [
      "useLayoutEffect(() => {",
      "\treturn () => {",
      "\t\t${1:effect}",
      "\t},",
      "\t[${2:input}]",
      "})"
    ]
  }
}